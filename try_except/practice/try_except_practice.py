""" 1 """
# Опишите полный синтаксис конструкции try-except:
"""
try:
    print(c)
except:
    print('c is not find')
else:
    print('yes')
finally:
    print('hello')
"""



""" 2 """
# Дан следующий код:
# Обработайте ошибку, которая может возникнуть. Если ошибок не возникло распечатайте сообщение:
# b = 10
# c = 11
# print(a)
"""
b = 10
c = 11
try:
    print(a)
except:
    print('Такой переменной не существует!')
"""



""" 3 """
# Напишите программу которая будет получать два числа num1, num2 через input , и выводить результат от деления первого на второе.
# Обработайте ошибку, которая возникнет в случае, если второе число окажется 0 и выведите сообщение.
"""
num1 = int(input('Enter the number: '))
num2 = int(input('Enter the number: '))
try:
    print(num1 / num2)
except ZeroDivisionError:
    print("the number can't divided by zero")
"""



""" 4 """
# Напишите программу, которая будет получать через input 2 числа num1, num2 и будет печатать их сумму.
# Обработайте ошибку, которая возникнет, если пользователь введёт что-то кроме числа и выведите сообщение, например: Введите число!
"""
try:
    num1 = int(input('Enter the number: '))
    num2 = int(input('Enter the second number: '))
    print(num1 + num2)
except ValueError:
    print('Enter just numbers')
"""



""" 5 """
# Создайте словарь, к примеру: dict_ = {'key1': 'value1', 'key2': 'value2'} 
# Попытайтесь вывести значение по ключу. Обработайте ошибку, возникающую в том случае, если такого ключа нет, например таким выводом в терминал: Нет такого ключа!
"""
dict_ = {'key1': 'value1', 'key2': 'value2'}
try:
    print(dict_['hello'])
except KeyError:
    print('Нет такого ключа!')
"""



""" 6 """
# Создайте список list_ пример: list_ = [1, 4, 9, 16, 25, 36] 
# Обработайте исключение, возникающее при попытке обращения к несуществующему элементу. Примерный вывод в терминал: Нет такого элемента!
"""
list_ = [1, 4, 9, 16, 25, 36]
try:
    print(list_[6])
except IndexError:
    print('Нет такого элемента!')
"""



""" 7 """
# В блоке try запросите у пользователя ввод его возраста age = int(input()). Затем в том же блоке проверьте его возраст на совершеннолетие.
# Если пользователь несовершеннолетний(младше 18), выбросите исключение ValueError с текстом: Доступ запрещён
# Обработайте это исключение и другое исключение, которое возникает при вводе текста вместо возраста, выдав сообщение: Введён некорректный возраст
# Если ошибок не возникло распечатайте сообщение: Спасибо
# и, наконец, распечатайте сообщение: До свидания! вне зависимости от того, произошла ошибка или нет.
"""
try:
    age = int(input())
    if age < 18:
        raise ValueError('Доступ запрещён')
except Exception:  
    print('Введён некорректный возраст')
else:
    print('Спасибо')
finally:
    print('До свидания!')
"""




""" 8 """
# В блоке try запросите у пользователя 2 числа num1, num2, затем выведите результат деления первого числа на второе.
# В блоке except обработайте сразу 2 возможных исключения и распечатайте: Произошла ошибка!
"""
try:
    num1 = int(input('Enter first number: '))
    num2 = int(input('Enter second number: '))
    print(num1 % num2)
except (ZeroDivisionError, ValueError):
    print('Произошла ошибка!')
"""



""" 9 """
# Запросите у пользователя сумму cash которая у него сейчас есть в бумажнике. Если он введёт сумму, меньшую чем 0, то выбросите исключение ValueError с текстом:
# Сумма не может быть отрицательной!  иначе распечатайте сумму.
"""
sum = int(input())
if sum<0:
    raise ValueError('Сумма не может быть отрицательной!')
else:
    print(sum)
"""



""" 10 """
# Вам дан список list_ = [1, 2, 3], попробуйте достать элемент методом словаря get(), обработайте ошибку, которая может возникнуть если достать элемент таким способом
"""
list_ = [1, 2, 3]
try:
    print(list_.get())
except AttributeError:
    print('you are using wrong method')
"""



""" 11 """
# У вас есть переменная string, в которой хранится строка и есть переменная num, в которой хранится число, попробуйте суммировать эти переменные, а в случае
# ошибки должна выдаваться строка 'Unsupported option', в except обработайте именно ту ошибку, которая возникает в этом случае, нельзя прописать просто except!
"""
string = 'some string'
num = 6
try:
    print(string + num)
except TypeError:
    print('Unsupported option')
"""



""" 12 """
# Добавьте числа от 0 до 10 в список list_, не создавая такой список
# обработайте ошибку, которая возникнет при этом случае
"""
try:
    list_.extend(range(10))
    print(list_)
except NameError:
    print('no')
"""



""" 13 """
# Обработайте ошибку, которая возникнет в этом коде
# list_ = [1, 2, 3, 4]
# for i in range(0, len(list_) + 1):
#     print(list_[i])
"""
try:
    list_ = [1, 2, 3, 4]
    for i in range(0, len(list_) + 1):
        print(list_[i])
except IndexError:
    print('ERROR!')
"""



""" 14 """
# Создайте переменную password, который будет содержать пароль в виде строки. Вызовите исключение ValueError, если пароль меньше 6 символов
"""
password = 'hello world'
if len(password) < 6:
    raise ValueError
"""




""" 15 """
# У нас есть список warehouse (склад), куда помещается только 10 коробок. В каждая коробка представляет собой список, в которую помещается максимум 3 элемента.
# Если на складе больше коробок, или в коробке больше элементов, чем допустимо, вызывайте ValueError
# Пример склада, который не должен вызывать ошибок: 
"""
warehouse = [
    ['1', '2', '3'],
    [1, 2],
    [[1], [2], [3]],
    [[1, 2, 3], [1, 2, 3, 4, 5], {'hello': 'world'}],
]

try:
    for i in warehouse:
        if len(i) > 3:
            raise ValueError
    if len(warehouse) > 10:
        raise ValueError
finally:
    pass
"""



""" 17 """
# Напишите функцию to_fahrenheit(k:int) -> float, который будет переводить температуру из градусов Кельвина в градусы Фаренгейта.
# Ваш код должен вызывать ошибку с сообщением "Холоднее абсолютного нуля!", если пользователь ввел температуру ниже нуля или 0
# Нельзя использовать условные операторы для проверки, воспользуйтесь assert. Формула (K − 273,15) × 9/5 + 32, где K - Число по Kельвину
"""
def to_fahrenheit(k:int) -> float:
    assert k>=0,'Холоднее абсолютного нуля!'
    res=(k-273.15)*9/5+32
    return res 
print(to_fahrenheit(0))
"""



""" 18 """
# Попробуйте импортировать модуль lamabimgo, если такого модуля нет, отловите ошибку и выведите сообщение Такого модуля нет
"""
try:
    import lamabimgo
except ModuleNotFoundError:
    print('Такого модуля нет')
"""



""" 19 """
# Представьте, что у вас есть канал, где можно оставлять комментарии. Вам нужно написать функцию filter_comment(comment: str, banlist=[]) -> None, 
# который принимает в себя сам комментарий и список запрещенных слов. Проверьте каждое слово в комментарии, и, если оно есть в списке запрещенных слов,
# вызывать ошибку ValueError с сообщением: "Ваш комментарий отправлен на перепроверку, так как, возможно, содержит неблагоприятный контекст".
# Также учитывайте, что к словам могут быть прикреплены лишние символы, такие как ., !, ? и ,. Они должны будут убираться при проверке, регистр также не должен иметь значения.
"""
def filter_comment(comment: str, banlist=[]) -> None:
    for i in comment:
        if i == '!' or i == '?' or i == '.' or i ==',':
            comment = comment.replace(i, '')
    new_list = comment.split()
    for k in new_list:
        if k.lower() in banlist:
            raise ValueError('Ваш комментарий отправлен на перепроверку, так как, возможно, содержит неблагоприятный контекст')
        

filter_comment('hel.,!?looh, my dear', ['you', 'my', 'pussy'])
"""



""" 20 """
# Напишите код, который должен отрабатывать пока переменная num со значением 100000000 не будет равна 1,
# обработайте ошибку, которая может возникнуть если попытаться остановить код (ctrl+c) с сообщением "Nope"
"""
try: 
    num=100000000 
    for i in range(num):
        print('Nope')
except KeyboardInterrupt:
    print('Nope')
"""



""" 21 """
# Напишите функцию collect_all_possibles(list_: list, num: int) -> list Она должна принимать в себя список, и возвращать новый список, в котором будут содержаться,
# все возможные результаты арифметических операций на число, переданное в num, если тип данных поддерживает такую операцию  (сложение, умножение, деление без остатка,
# вычитание, возведение в степень) Единственное исключение - деление с остатком, его включать не нужно. Список должен быть возвращен в любом случае, даже пустым
"""
def collect_all_possibles(list_: list, num: int) -> list:
    list1 = []
    try:
        for i in list_:
            try:
                list1.append(i * num)
            except:
                pass
            try:
                list1.append(i - num)
            except:
                pass
            try:
                list1.append(i // num)
            except:
                pass
            try:
                list1.append(i ** num)
            except:
                pass
            try:
                list1.append(i + num)
            except:
                pass
    except:
        pass
    return list1

print(collect_all_possibles([1,2,3], 2))
"""



""" 22 """
# Напишите программу, которая запрашивает ввод двух значений inp1, inp2. Если хотя бы одно из них не является числом, 
# то должна выполняться конкатенация, т. е. соединение, строк. В остальных случаях введенные числа суммируются.

"""
inp1 = input()
inp2 = input()

try:
     print(int(inp1) + int(inp2))
except:
    print(inp1 + inp2)
"""



""" 23 """
# Запросите у пользователя несколько слов и чисел, поместите их в переменную inp1 введенных через пробел, затем: поместите эти слова в список переберите этот список циклом и
# перевидете все строки в тип данных - число все числа поместите в отдельный list_ а на возникающие исключение сгенерируйте свое исключение cо строкой:
# Данный элемент не является числом!
"""
inp1 = input()
list1 = inp1.split()
list_ = []
for i in list1:
    try:
        list_.append(int(i))
    except:
        raise ValueError ('Данный элемент не является числом!')
print(list_)
"""